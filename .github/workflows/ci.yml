name: CI & Sonar

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # 定时全量扫描（可选）
  schedule:
    - cron: "0 18 * * *"   # 新加坡时间 02:00 = UTC 18:00

jobs:
  build-test-sonar:
    runs-on: ubuntu-latest

    env:                     # 所有 Gradle 步骤共享
      GRADLE_OPTS:  -Dorg.gradle.jvmargs="-Xmx3g -XX:+UseParallelGC"
      SONAR_HOST:   ${{ secrets.SONAR_HOST }}
      SONAR_TOKEN:  ${{ secrets.SONAR_TOKEN }}

    steps:
      # 1️⃣ 检出代码
      - uses: actions/checkout@v4

      # 2️⃣ 验证 wrapper（安全）
      - uses: gradle/wrapper-validation-action@v2

      # 3️⃣ 安装 JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      # 4️⃣ 缓存 Gradle 本地仓库
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key:  ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 5️⃣ 编译 + 测试 + 覆盖率 + BootJar
      - name: Build & Test
        run: |
          ./gradlew --no-daemon --parallel clean build
        # 如果需要私有 Maven，添加：
        # env:
        #   MAVEN_TOKEN: ${{ secrets.MAVEN_TOKEN }}

      # 6️⃣ 上传到 Sonar（Gradle 4.x 插件的任务名是 `sonar`）
      - name: Sonar analysis
        run: |
          ./gradlew --no-daemon sonar \
            -Dsonar.host.url=$SONAR_HOST \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
        if: ${{ env.SONAR_TOKEN != '' && env.SONAR_HOST != '' }}

      # 7️⃣ 将 Jacoco HTML 作为工作流产物（可选，方便下载查看）
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-html
          path: build/reports/jacoco/test/html
          retention-days: 7
