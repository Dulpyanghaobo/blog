plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

group = 'com.hab'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    // 如果您打算使用异步方法，可以加入异步相关的支持
    implementation 'org.springframework:spring-webflux'
    // 如果您的应用程序需要发送异步消息（如使用RabbitMQ或Kafka），可以添加对应的Starter
    // 或者使用Kafka
    implementation 'org.springframework.kafka:spring-kafka'
    // Swagger (SpringFox) 自动生成API文档的依赖（如果需要）
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    // AOP相关，如果您需要使用AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    // 日志框架的依赖，Spring Boot默认使用Logback，如果您需要其他的日志框架，可以进行相应配置
    // Log4j2
    implementation 'org.springframework.boot:spring-boot-starter-log4j2'

    // HikariCP作为数据库连接池的依赖，通常spring-boot-starter-data-jpa已经自动配置了
    // 如果需要显式配置或者自定义版本，可以添加以下依赖
    implementation 'com.zaxxer:HikariCP'

    // 如果需要数据库迁移工具，可以添加Flyway或Liquibase
    // Flyway
    implementation 'org.flywaydb:flyway-core'
    // Liquibase
    implementation 'org.liquibase:liquibase-core'

    // 用于服务监控和管理
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // 用于API版本控制的依赖（如果需要）
    implementation 'org.springframework.data:spring-data-rest-webmvc'

    // 用于处理文件上传的依赖（如果需要）
    implementation 'commons-fileupload:commons-fileupload'

    // 如果需要更复杂的对象映射，可以使用ModelMapper
    implementation 'org.modelmapper:modelmapper:3.1.0'

    // 如果要对异步操作进行测试，可能还需要添加Spring的异步测试支持
    testImplementation 'org.springframework:spring-test'

    // 对于集成测试，如果需要模拟Web环境，可以添加以下依赖
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

    // 断言库 AssertJ，如果您想使用更流畅的断言方式
    testImplementation 'org.assertj:assertj-core:3.21.0'

    // Mockito用于Mock测试
    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'

    // 数据库版本控制的测试依赖
    testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.5.3'

    // 异步事件的测试
    testImplementation 'org.springframework:spring-messaging'

    // 如果您的测试中需要检查日志输出，可以添加以下依赖
    testImplementation 'uk.org.lidalia:slf4j-test:1.2.0'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // Spring Cache and Redis
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    // Spring Boot oauth2 client
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // Spring Boot Send Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // https://mvnrepository.com/artifact/com.aliyun.oss/aliyun-sdk-oss
    implementation 'com.aliyun.oss:aliyun-sdk-oss:3.16.0'
    implementation 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    // https://mvnrepository.com/artifact/javax.persistence/javax.persistence-api
    // Mysql Connect
    implementation 'mysql:mysql-connector-java:8.0.33' // replace with the desired version
    // config JWT Generate project
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    // https://mvnrepository.com/artifact/org.springframework/spring-jdbc
    implementation 'org.springframework:spring-jdbc:6.0.13'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.2') // For Jackson JSON processor
    // https://mvnrepository.com/artifact/com.fasterxml.uuid/java-uuid-generator
    implementation 'com.fasterxml.uuid:java-uuid-generator:4.3.0'
// https://mvnrepository.com/artifact/org.jodconverter/jodconverter-spring-boot-starter
    implementation 'org.jodconverter:jodconverter-core:4.4.6'
    // OCR
    implementation 'net.sourceforge.tess4j:tess4j:1.3.0'
    // Spring Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Spring autoconfigure Test
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    // Object match
    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation 'org.testcontainers:mysql'
    // JUnit Jupiter API and Engine for writing tests
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    // Spring Boot test starter for testing Spring Boot applications
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2:2.2.224'
    // https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.10.0'
    // Testcontainers for integration tests
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation 'org.testcontainers:mysql:1.16.0'
}

tasks.named('test') {
    useJUnitPlatform()
}
